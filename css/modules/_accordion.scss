
.accordion4 {
    &__input {
      display: none;
  
      /* inputタグがチェック状態になるとactiveになる */
      &:checked {
  
        /* 【「~」の説明】
        「~」の意味は、後ろにある同じ階層の要素
        今回だと、[accordion__input]がcheckedの状態の時、
        同じ階層で、後ろにある[accordion__wrap]と
        [accordion__label]にCSSを効かせることができる。
  
        Q：「~」が無かったらどうなる？
        A：無い時の書き方は、↓のようになるが、
        [accordion__input]の一階層下にCSSを効かせる。
        という意味になってしまう。
          -    &:checked{
          -        .accordion__wrap{             
        */
  
        ~ .accordion4__wrap {
          height: auto;
          // checkがついてる時、文字を覆っているdivの高さをコンテンツに合わせた高さに変える。
        }
  
        ~ .accordion4__label {
          // checkがついてる時、ボタンの中の疑似要素を変更する
          &::before {
            content: "閉じる"
          }
  
          &::after {
            font-family: "Font Awesome 5 Free";
            content: "\f068";
            /* font awesomeアイコンを使いたい時
              https://fontawesome.com/icons/times?style=solid
              ↑ページなど公式ページから、Unicodeをコピペし、contentに入れる。
              font-familyも指定する必要あり。
              Unicodeの位置参考：https://digitalidentity.co.jp/blog/creative/font-awesome.html#CSS
            */
            padding-left: 8px;
            color: #b8b1cd;
            font-weight: 900;
  
          }
        }
      }
    }
  
    &__wrap {
      overflow: hidden;
      // checkがついてない時のコンテンツの高さ（デフォルト値になる）
      // 0pxにすると完全に隠れる
      height: 0px;
    }
  
    &__label {
      text-align: center;
      display: block;
      padding: 10px;
      border: 1px solid;
      border-color: #b8b1cd;
      border-radius: 30px;
      background-color: #FFFEF4;
      margin-bottom: 10px;
  
      // checkedがついてない時の疑似要素設定
      &::before {
        content: "商品の説明";
        color: #dd5253;
      }
  
      &::after {
        font-family: "Font Awesome 5 Free";
        content: "\f067";
        padding-left: 8px;
        color: #b8b1cd;
        font-weight: 900;
      }
    }
  }
  

.accordion4__label {
    max-width: 300px;
    margin: 10px auto;
    margin-bottom: 20px;
  }
  
  
  // 5
  .accordion5 {
    &__input {
      display: none;
  
      /* inputタグがチェック状態になるとactiveになる */
      &:checked {
  
        /* 【「~」の説明】
        「~」の意味は、後ろにある同じ階層の要素
        今回だと、[accordion__input]がcheckedの状態の時、
        同じ階層で、後ろにある[accordion__wrap]と
        [accordion__label]にCSSを効かせることができる。
  
        Q：「~」が無かったらどうなる？
        A：無い時の書き方は、↓のようになるが、
        [accordion__input]の一階層下にCSSを効かせる。
        という意味になってしまう。
          -    &:checked{
          -        .accordion__wrap{             
        */
  
        ~ .accordion5__wrap {
          height: auto;
          // checkがついてる時、文字を覆っているdivの高さをコンテンツに合わせた高さに変える。
        }
  
        ~ .accordion5__label {
          // checkがついてる時、ボタンの中の疑似要素を変更する
          &::before {
            content: "閉じる"
          }
  
          &::after {
            font-family: "Font Awesome 5 Free";
            content: "\f068";
            /* font awesomeアイコンを使いたい時
              https://fontawesome.com/icons/times?style=solid
              ↑ページなど公式ページから、Unicodeをコピペし、contentに入れる。
              font-familyも指定する必要あり。
              Unicodeの位置参考：https://digitalidentity.co.jp/blog/creative/font-awesome.html#CSS
            */
            padding-left: 8px;
            color: #b8b1cd;
            font-weight: 900;
  
          }
        }
      }
    }
  
    &__wrap {
      overflow: hidden;
      // checkがついてない時のコンテンツの高さ（デフォルト値になる）
      // 0pxにすると完全に隠れる
      height: 0px;
    }
  
    &__label {
      text-align: center;
      display: block;
      padding: 10px;
      border: 1px solid;
      border-color: #b8b1cd;
      border-radius: 30px;
      background-color: #FFFEF4;
      margin-bottom: 10px;
  
      // checkedがついてない時の疑似要素設定
      &::before {
        content: "商品の説明";
        color: #dd5253;
      }
  
      &::after {
        font-family: "Font Awesome 5 Free";
        content: "\f067";
        padding-left: 8px;
        color: #b8b1cd;
        font-weight: 900;
      }
    }
  }
  

.accordion5__label {
    max-width: 300px;
    margin: 10px auto;
    margin-bottom: 20px;
  }
  
  
  // 6
  .accordion6 {
    &__input {
      display: none;
  
      /* inputタグがチェック状態になるとactiveになる */
      &:checked {
  
        /* 【「~」の説明】
        「~」の意味は、後ろにある同じ階層の要素
        今回だと、[accordion__input]がcheckedの状態の時、
        同じ階層で、後ろにある[accordion__wrap]と
        [accordion__label]にCSSを効かせることができる。
  
        Q：「~」が無かったらどうなる？
        A：無い時の書き方は、↓のようになるが、
        [accordion__input]の一階層下にCSSを効かせる。
        という意味になってしまう。
          -    &:checked{
          -        .accordion__wrap{             
        */
  
        ~ .accordion6__wrap {
          height: auto;
          // checkがついてる時、文字を覆っているdivの高さをコンテンツに合わせた高さに変える。
        }
  
        ~ .accordion6__label {
          // checkがついてる時、ボタンの中の疑似要素を変更する
          &::before {
            content: "閉じる"
          }
  
          &::after {
            font-family: "Font Awesome 5 Free";
            content: "\f068";
            /* font awesomeアイコンを使いたい時
              https://fontawesome.com/icons/times?style=solid
              ↑ページなど公式ページから、Unicodeをコピペし、contentに入れる。
              font-familyも指定する必要あり。
              Unicodeの位置参考：https://digitalidentity.co.jp/blog/creative/font-awesome.html#CSS
            */
            padding-left: 8px;
            color: #b8b1cd;
            font-weight: 900;
  
          }
        }
      }
    }
  
    &__wrap {
      overflow: hidden;
      // checkがついてない時のコンテンツの高さ（デフォルト値になる）
      // 0pxにすると完全に隠れる
      height: 0px;
    }
  
    &__label {
      text-align: center;
      display: block;
      padding: 10px;
      border: 1px solid;
      border-color: #b8b1cd;
      border-radius: 30px;
      background-color: #FFFEF4;
      margin-bottom: 10px;
  
      // checkedがついてない時の疑似要素設定
      &::before {
        content: "商品の説明";
        color: #dd5253;
      }
  
      &::after {
        font-family: "Font Awesome 5 Free";
        content: "\f067";
        padding-left: 8px;
        color: #b8b1cd;
        font-weight: 900;
      }
    }
  }
  

.accordion6__label {
    max-width: 300px;
    margin: 10px auto;
    margin-bottom: 20px;
  }
  
  
  // 7
  .accordion7 {
    &__input {
      display: none;
  
      /* inputタグがチェック状態になるとactiveになる */
      &:checked {
  
        /* 【「~」の説明】
        「~」の意味は、後ろにある同じ階層の要素
        今回だと、[accordion__input]がcheckedの状態の時、
        同じ階層で、後ろにある[accordion__wrap]と
        [accordion__label]にCSSを効かせることができる。
  
        Q：「~」が無かったらどうなる？
        A：無い時の書き方は、↓のようになるが、
        [accordion__input]の一階層下にCSSを効かせる。
        という意味になってしまう。
          -    &:checked{
          -        .accordion__wrap{             
        */
  
        ~ .accordion7__wrap {
          height: auto;
          // checkがついてる時、文字を覆っているdivの高さをコンテンツに合わせた高さに変える。
        }
  
        ~ .accordion7__label {
          // checkがついてる時、ボタンの中の疑似要素を変更する
          &::before {
            content: "閉じる"
          }
  
          &::after {
            font-family: "Font Awesome 5 Free";
            content: "\f068";
            /* font awesomeアイコンを使いたい時
              https://fontawesome.com/icons/times?style=solid
              ↑ページなど公式ページから、Unicodeをコピペし、contentに入れる。
              font-familyも指定する必要あり。
              Unicodeの位置参考：https://digitalidentity.co.jp/blog/creative/font-awesome.html#CSS
            */
            padding-left: 8px;
            color: #b8b1cd;
            font-weight: 900;
  
          }
        }
      }
    }
  
    &__wrap {
      overflow: hidden;
      // checkがついてない時のコンテンツの高さ（デフォルト値になる）
      // 0pxにすると完全に隠れる
      height: 0px;
    }
  
    &__label {
      text-align: center;
      display: block;
      padding: 10px;
      border: 1px solid;
      border-color: #b8b1cd;
      border-radius: 30px;
      background-color: #FFFEF4;
      margin-bottom: 10px;
  
      // checkedがついてない時の疑似要素設定
      &::before {
        content: "商品の説明";
        color: #dd5253;
      }
  
      &::after {
        font-family: "Font Awesome 5 Free";
        content: "\f067";
        padding-left: 8px;
        color: #b8b1cd;
        font-weight: 900;
      }
    }
  }
  


.accordion7__label {
    max-width: 300px;
    margin: 10px auto;
    margin-bottom: 20px;
  }